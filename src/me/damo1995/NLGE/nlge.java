package me.damo1995.NLGE;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.FileConfigurationOptions;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

public class nlge extends JavaPlugin {
	Logger log = Logger.getLogger("Minecraft");
	private final nlgePlayerListener pl = new nlgePlayerListener(this);
	private nlgeCommandExec CommandExec;
	public boolean outdated = false;
	public void onEnable() {
		// Set Plugin Manager to pm//
		PluginManager pm = Bukkit.getPluginManager();
		
		// Register Command Executor File //
		this.CommandExec = new nlgeCommandExec(this);
		
		// Register events in the file //
		pm.registerEvents(this.pl, this);
		
		// Log Enabled to console //
		logMessage("Enabled!");
		
		// Setup file Configuration//
		final FileConfiguration cfg = getConfig();
		FileConfigurationOptions cfgOptions = cfg.options();
		getConfig().addDefault("debug", false);
		getConfig().addDefault("notify-use", true);
		getConfig().addDefault("notify-msg",
				"You cannot do that in this light enviroment!");
		getConfig().addDefault("notify-admin", true);
		cfgOptions.copyDefaults(true);
		cfgOptions
				.header("Default Config for noLongGrassExploit \n use the values below to change what you wish");
		cfgOptions.copyHeader(true);
		saveConfig();

		// Setup The Command Executor//
		this.getCommand("nlge").setExecutor(CommandExec);
	
		// 			Update setup			//
		
		
		PluginDescriptionFile pdfFile = getDescription();

		VersionNumber currentVersion = new VersionNumber(pdfFile.getVersion());
		List<String> versionURL = readURL("http://ddelay.co.uk/bukkit/NoLongGrassExploit/ver.html");
		String lVersion = versionURL.get(0) + "." + versionURL.get(1) + "." + versionURL.get(2);
		VersionNumber latestVersion = new VersionNumber(lVersion);

		if(currentVersion.version[0] < latestVersion.version[0] ||
		                currentVersion.version[1] < latestVersion.version[1] ||
		                currentVersion.version[2]< latestVersion.version[2])
		{
		        //UPDATE AVAILABLE
			this.logMessage("Update Avalable" + " " + "Latest Version: " + lVersion);
			outdated = true;
		} else {
		        //UP TO DATE
			this.logMessage("Up-to Date.");
			outdated = false;
		} 

		
	}

	public void onDisable() {
		// Log Disabled to console //
		logMessage("Disabled");

	}

	
	protected void logMessage(String msg) {
		PluginDescriptionFile pdFile = this.getDescription();
		this.log.info(pdFile.getName() + " " + pdFile.getVersion() + ": " + msg);
	}
	
	public List<String> readURL(String url)
	{
	        try {
	                URL site = new URL(url);
	                URLConnection urlC = site.openConnection();
	                BufferedReader in = new BufferedReader(new InputStreamReader(urlC.getInputStream()));

	                List<String> lines = new ArrayList<String>();
	                String line;
	                while((line = in.readLine()) != null)
	                {
	                        lines.add(line);
	                }

	                in.close();

	                return lines;
	        } catch(MalformedURLException e) {
	                e.printStackTrace();
	        } catch(IOException e) {
	                e.printStackTrace();
	        }

	        return null;
	}

}
